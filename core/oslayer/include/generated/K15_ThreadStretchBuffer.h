/*********************************************************************************/
/* 	!!!THIS FILE IS AUTOMATICALLY GENERATED. ANY CHANGES WILL BE OVERRIDDEN!!!	 */
/*********************************************************************************/

#ifndef _K15_Thread_Stretch_Buffer_h_
#define _K15_Thread_Stretch_Buffer_h_

//forward declaration
struct K15_Thread;

//compare function
typedef unsigned char (*K15_ThreadCompareFnc)(K15_Thread** p_LHS, K15_Thread** p_RHS);

//get condition function
typedef unsigned char (*K15_ThreadConditionFnc)(K15_Thread** p_Element, void* p_UserData);

struct K15_ThreadStretchBuffer
{
	K15_Thread** elements;

	unsigned int numCapacity;
	unsigned int numElements;
};

void K15_CreateThreadStretchBuffer(K15_ThreadStretchBuffer* p_StretchBuffer, unsigned int p_Capacity = 8);
void K15_DeleteThreadStretchBuffer(K15_ThreadStretchBuffer* p_StretchBuffer);
void K15_ResizeThreadStretchBuffer(K15_ThreadStretchBuffer* p_StretchBuffer, unsigned int p_Capacity);

void K15_PushThread(K15_ThreadStretchBuffer* p_StretchBuffer, K15_Thread* p_Element);
unsigned char K15_PopThread(K15_ThreadStretchBuffer* p_StretchBuffer, unsigned int p_Index);
unsigned char K15_PopThreadElement(K15_ThreadStretchBuffer* p_StretchBuffer, K15_Thread* p_Element);
unsigned char K15_PopThreadCompare(K15_ThreadStretchBuffer* p_StretchBuffer, K15_Thread* p_Element, K15_ThreadCompareFnc p_CompareFnc);

K15_Thread** K15_GetThreadElement(K15_ThreadStretchBuffer* p_StretchBuffer, unsigned int p_Index);
K15_Thread** K15_GetThreadElementConditional(K15_ThreadStretchBuffer* p_StretchBuffer, K15_ThreadConditionFnc p_ConditionFnc, void* p_UserData = 0);

#endif //_K15_Thread_Stretch_Buffer_h_s