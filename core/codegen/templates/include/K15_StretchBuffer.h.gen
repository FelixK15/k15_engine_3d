/*********************************************************************************/
/*  THIS FILE HAS BEEN GENERATED AUTOMATICALLY. ANY CHANGES WILL BE OVERRIDDEN   */
/*********************************************************************************/

#ifndef _K15_$TYPE_NAME$_Stretch_Buffer_h_
#define _K15_$TYPE_NAME$_Stretch_Buffer_h_

//forward declaration
struct $TYPE_STRUCT_NAME$;
struct K15_CustomMemoryAllocator;

//compare function
typedef unsigned char (*K15_$TYPE_NAME$CompareFnc)($TYPE$* p_LHS, $TYPE$* p_RHS);

//get condition function
typedef unsigned char (*K15_$TYPE_NAME$ConditionFnc)($TYPE$* p_Element, void* p_UserData);

struct K15_$TYPE_NAME$StretchBuffer
{
	K15_CustomMemoryAllocator* memoryAllocator; //64bit
	$TYPE$* elements;							//64bit

	unsigned int numCapacity;					//32bit
	unsigned int numElements;					//32bit
	unsigned int flags;							//32bit
};

void K15_Create$TYPE_NAME$StretchBufferWithCustomAllocator(K15_$TYPE_NAME$StretchBuffer* p_StretchBuffer, K15_CustomMemoryAllocator* p_MemoryAllocator, unsigned int p_ElementCapacity);
void K15_Create$TYPE_NAME$StretchBuffer(K15_$TYPE_NAME$StretchBuffer* p_StretchBuffer, unsigned int p_ElementCapacity = 8);
void K15_Delete$TYPE_NAME$StretchBuffer(K15_$TYPE_NAME$StretchBuffer* p_StretchBuffer);
void K15_Resize$TYPE_NAME$StretchBuffer(K15_$TYPE_NAME$StretchBuffer* p_StretchBuffer, unsigned int p_ElementCapacity);
void K15_Clear$TYPE_NAME$StretchBuffer(K15_$TYPE_NAME$StretchBuffer* p_StretchBuffer);

void K15_Push$TYPE_NAME$StretchBufferElement(K15_$TYPE_NAME$StretchBuffer* p_StretchBuffer, $TYPE$ p_Element);
unsigned char K15_Pop$TYPE_NAME$StretchBufferIndex(K15_$TYPE_NAME$StretchBuffer* p_StretchBuffer, unsigned int p_Index);
unsigned char K15_Pop$TYPE_NAME$StretchBufferElement(K15_$TYPE_NAME$StretchBuffer* p_StretchBuffer, $TYPE$ p_Element);
unsigned char K15_Pop$TYPE_NAME$StretchBufferCompare(K15_$TYPE_NAME$StretchBuffer* p_StretchBuffer, $TYPE$ p_Element, K15_$TYPE_NAME$CompareFnc p_CompareFnc);

$TYPE$* K15_Get$TYPE_NAME$StretchBufferElementUnsafe(K15_$TYPE_NAME$StretchBuffer* p_StretchBuffer, unsigned int p_Index);
$TYPE$* K15_Get$TYPE_NAME$StretchBufferElement(K15_$TYPE_NAME$StretchBuffer* p_StretchBuffer, unsigned int p_Index);
$TYPE$* K15_Get$TYPE_NAME$StretchBufferElementConditional(K15_$TYPE_NAME$StretchBuffer* p_StretchBuffer, K15_$TYPE_NAME$ConditionFnc p_ConditionFnc, void* p_UserData = 0);

#endif //_K15_$TYPE_NAME$_Stretch_Buffer_h_s